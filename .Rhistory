Sensibilidad <- (suma_col1 / suma_col2) * 100
sensibilidad <<- capture.output(cat("Sensibilidad: ", round(Sensibilidad,2), ",",
" ", "(", suma_col1, ")/(", suma_col2, ")", sep = ""))
# imprimir sensibilidad
cat("",sensibilidad,"", sep = "\n")
############# ESPECIFICIDAD ##############
# columnas filtradas
col1 <- Completo$Genotipo == "Susceptible"
col2 <- Completo$Fenotipo == "Susceptible"
# sumas
suma_col1 <- sum(col1)
suma_col2 <- sum(col2)
# obtener sensiblidad
Especificidad <- (suma_col1 / suma_col2) * 100
especificidad <<- capture.output(cat("Especificidad: ", round(Especificidad,2), ",",
" ", "(", suma_col1, ")/(", suma_col2, ")", sep = ""))
# imprimir sensibilidad
cat("",especificidad,"", sep = "\n")
################# PERFILES ######################
# crear df de perfiles
perfiles <- Completo %>% count(Perfil)
# asignar nombres de columnas
colnames(perfiles) <- c("Perfil", "No_Aislados")
# obtener el total
perfiles[(nrow(perfiles) + 1),"No_Aislados"] <- sum(perfiles$No_Aislados)
# agregar el Total
perfiles[nrow(perfiles), "Perfil"] <- "Total"
####### asignar valor de fin (columna donde esta "Sin_Gen") #######
# variable donde esta "Sin_Gen"
constitutivo <- str_detect(Completo$Perfil,
"aac[:punct:]6[:punct:][:punct:]-Iaa,|aac[:punct:]6[:punct:][:punct:]-Iaa")
# si no existe Sin_Gen es muy probable que exista el gen constitutivo aac(6')-Iaa
# se debe remover
if (sum(constitutivo[TRUE]) == nrow(Completo) & Categoria == "Aminoglucosidos") {
# reemplazar gen constitutivo por strng vacio
Completo$Perfil <- str_replace_all(
Completo$Perfil, "aac[:punct:]6[:punct:][:punct:]-Iaa,|aac[:punct:]6[:punct:][:punct:]-Iaa", "")
# reemplazar string vacio por "Sin_Gen"
Completo$Perfil[Completo$Perfil == ""] <- "Sin_Gen"
# modificar columna de Genotipo
Completo$Genotipo[Completo$Perfil == "Sin_Gen"] <- "Susceptible"
# comparar resistencias entre genotipo y fenotipo
Completo$Versus <- ifelse(Completo$Genotipo == Completo$Fenotipo, "IGUAL", "DIFERENTE")
# buscar aislados raros clasificados como:
# falsos positivos (no existe gen pero es resistente por AST)
# genes apagados (existe un gen pero es susceptible por AST)
Completo$Raros <- ifelse(
Completo$Perfil != "Sin_Gen" & Completo$Fenotipo == "Susceptible", "Apagado",
ifelse(
Completo$Perfil == "Sin_Gen" & Completo$Fenotipo == "Resistente", "Falso Positivo",
"Normal"))
# volver global
Completo$Perfil <- unlist(Completo$Perfil) # quitar formato de lista a Perfil
Completo <<- as.data.frame(Completo)
############### recalcular sensibilidad y sensibilidad ###############
############# SENSIBILIDAD 2 ##############
# columnas filtradas
col1 <- Completo$Genotipo == "Resistente"
col2 <- Completo$Fenotipo == "Resistente"
# sumas
suma_col1 <- sum(col1)
suma_col2 <- sum(col2)
# obtener sensiblidad
Sensibilidad <- (suma_col1 / suma_col2) * 100
sensibilidad <<- capture.output(cat("Sensibilidad corregida: ", round(Sensibilidad,2), ",",
" ", "(", suma_col1, ")/(", suma_col2, ")", sep = ""))
# imprimir sensibilidad
cat("",sensibilidad,"", sep = "\n")
############# ESPECIFICIDAD 2 ##############
# columnas filtradas
col1 <- Completo$Genotipo == "Susceptible"
col2 <- Completo$Fenotipo == "Susceptible"
# sumas
suma_col1 <- sum(col1)
suma_col2 <- sum(col2)
# obtener sensiblidad
Especificidad <- (suma_col1 / suma_col2) * 100
especificidad <<- capture.output(cat("Especificidad corregida: ", round(Especificidad,2), ",",
" ", "(", suma_col1, ")/(", suma_col2, ")", sep = ""))
# imprimir sensibilidad
cat("",especificidad,"", sep = "\n")
###################### crear perfiles #########################
# crear df de perfiles
perfiles <- Completo %>% count(Perfil)
# asignar nombres de columnas
colnames(perfiles) <- c("Perfil", "No_Aislados")
# obtener el total
perfiles[(nrow(perfiles) + 1),"No_Aislados"] <- sum(perfiles$No_Aislados)
# agregar el Total
perfiles[nrow(perfiles), "Perfil"] <- "Total"
##################### crear Sin_Gen ############################
# re-asignar variable donde esta "Sin_Gen"
Sin_Gen <<- which(perfiles$Perfil == "Sin_Gen")
}
# asignar valor de "fin"
if (Sin_Gen == 1) {
# resignar valor de fin
fin <- nrow(perfiles) - 1
} else {
# obtener fila final de aislados con genes
fin <- which(perfiles$Perfil == "Sin_Gen") - 1
}
# sumar aislados con genes
perfiles[fin, 3] <- sum(perfiles$No_Aislados[-c(Sin_Gen, nrow(perfiles))])
# agregar valor de "Sin_Gen"
perfiles[perfiles$Perfil == "Sin_Gen", 3] <- perfiles[perfiles$Perfil == "Sin_Gen",2]
# volver a asiganr cnombres de columnas
colnames(perfiles) <- c("Perfil", "No_Aislados", "Genotipo_Total")
# sumas genotipo con gen y sin gen
perfiles[nrow(perfiles), 3] <- sum(perfiles$Genotipo_Total, na.rm = T)
# cambiar NAs por 0s
perfiles[is.na(perfiles)] <- ""
# volver global
Perfiles <<- as.data.frame(perfiles)
# imprimir data frame
print(Perfiles)
################ DATA FRAMES FINALES #################
# totales
Totales_Resistente <- na.omit(Completo[Completo$Fenotipo == "Resistente",])
Totales_Susceptible <- na.omit(Completo[Completo$Fenotipo == "Susceptible",])
########## volver globales ###########
Totales_Resistente <<- Totales_Resistente
Totales_Susceptible <<- Totales_Susceptible
# coercionar columna de perfiles
Completo$Perfil <- as.factor(Completo$Perfil)
# ver perfiles
niveles <- levels(Completo$Perfil)
# longitud de niveles
length(niveles)
### volver global ###
niveles <<- niveles
########### crear listas de "Fenotipo Resistente" ###########
Fenotipos_Resistentes <- vector(mode = "list", length = length(niveles))
Fenotipos_Susceptibles <- vector(mode = "list", length = length(niveles))
#### poblar listas con daa frames de IDs de cada nivel o perfil de genes ####
for (i in 1:length(niveles)){
# crear data frames y guardarlos en lista
Fenotipos_Resistentes[[i]] <- assign(paste("Fenotipo_Resistente_",niveles[i], sep = ""),
na.omit( Completo[Completo$Perfil == niveles[i] &
Completo$Fenotipo == "Resistente",]) )
}
for (i in 1:length(niveles)){
# crear data frames y guardarlos en lista
Fenotipos_Susceptibles[[i]] <- assign(paste("Fenotipo_Susceptible_", niveles[i], sep = ""),
na.omit( Completo[Completo$Perfil == niveles[i] &
Completo$Fenotipo == "Susceptible",]) )
}
############## volver globales ###############
Fenotipos_Resistentes <<- Fenotipos_Resistentes
Fenotipos_Susceptibles <<- Fenotipos_Susceptibles
############### LISTAS DE IDs Y CONTEOS #################
######## resistentes y susceptibles totales #########
ID_Totales_Resistente <<- Totales_Resistente$ID
ID_Totales_Suseptible <<- Totales_Susceptible$ID
ID_Totales_Resistente_Conteo <<- length(ID_Totales_Resistente)
ID_Totales_Suseptible_Conteo <<- length(ID_Totales_Suseptible)
# listas de Resistentes y Susceptibles para guardar vectores de IDs y conteos
ID_Fenotipos_Resistentes <- vector(
mode = "list", length = length(niveles))
ID_Fenotipos_Susceptibles <- vector(
mode = "list", length = length(niveles))
ID_Fenotipos_Resistentes_Conteos <- vector(
mode = "list", length = length(niveles))
ID_Fenotipos_Susceptibles_Conteos <- vector(
mode = "list", length = length(niveles))
########### Poblar listas de Resistentes ##############
for (i in 1:length(Fenotipos_Resistentes)){
ID_Fenotipos_Resistentes[[i]] <- assign(
paste("ID_Fenotipos_Resistentes_", niveles[i], sep = ""),
na.omit(Fenotipos_Resistentes[[i]][1])
)
ID_Fenotipos_Resistentes_Conteos[[i]] <- assign(
paste("ID_Fenotipos_Resistentes_Conteo_", niveles[i], sep = ""),
nrow(Fenotipos_Resistentes[[i]])
)
}
######### Poblar listas de Susceptibles ##########
for (i in 1:length(Fenotipos_Susceptibles)){
ID_Fenotipos_Susceptibles[[i]] <- assign(
paste("ID_Fenotipos_Susceptibles_", niveles[i], sep = ""),
na.omit( Fenotipos_Susceptibles[[i]][1])
)
ID_Fenotipos_Susceptibles_Conteos[[i]] <- assign(
paste("ID_Fenotipos_Susceptibles_Conteo_", niveles[i], sep = ""),
nrow(Fenotipos_Susceptibles[[i]])
)
}
################## volver globales ####################
ID_Fenotipos_Resistentes <<- ID_Fenotipos_Resistentes
ID_Fenotipos_Susceptibles <<- ID_Fenotipos_Susceptibles
ID_Fenotipos_Resistentes_Conteos <<- ID_Fenotipos_Resistentes_Conteos
ID_Fenotipos_Susceptibles_Conteos <<- ID_Fenotipos_Susceptibles_Conteos
#################### TABLA FINAL #######################
########### agregar AST_Resistentes #############
AST_R <- ID_Fenotipos_Resistentes_Conteos %>%
data.frame() %>%
transpose()
AST_R[nrow(AST_R)+1,] <- AST_R %>% sum()
colnames(AST_R) <- "AST_Resistentes"
AST_R <- cbind("Perfil" = Perfiles$Perfil, AST_R)
AST_R <<- AST_R
########### agregar AST_Susceptibles ############
AST_S <- ID_Fenotipos_Susceptibles_Conteos %>%
data.frame() %>%
transpose()
AST_S[nrow(AST_S)+1,] <- AST_S %>% sum()
colnames(AST_S) <- "AST_Susceptibles"
AST_S <- cbind("Perfil" = Perfiles$Perfil, AST_S)
AST_S <<- AST_S
########### agregar AST_ID_Resistentes ###############
# quitar totales de df Perfiles
Perfiles2 <- Perfiles[-nrow(Perfiles),]
# asignar nombres de columnas a df guardados en listas
for (i in 1:length(Perfiles2$Perfil)){
colnames(ID_Fenotipos_Resistentes[[i]]) <- Perfiles2$Perfil[i]
colnames(ID_Fenotipos_Susceptibles[[i]]) <- Perfiles2$Perfil[i]
}
if (sum(Completo$Fenotipo == "Susceptible") == nrow(Completo)) {
# crear directamente IDs_Fenotipos_Resistentes_1
IDs_Fenotipos_Resistentes_1 <<- c(
rep("NA", times = length(ID_Fenotipos_Resistentes))) %>%
as_tibble()
names(IDs_Fenotipos_Resistentes_1) <- "Genes"
} else {
# crear un solo df en base a df guardados en listas
IDs_Fenotipos_Resistentes_0 <<- bind_rows(ID_Fenotipos_Resistentes,) %>%
transpose
# unir IDs en una sola columna
IDs_Fenotipos_Resistentes_1 <<- unite(IDs_Fenotipos_Resistentes_0,
col = "Genes",
paste("V", 1:(ncol(IDs_Fenotipos_Resistentes_0)), sep = ""),
sep = ",")
}
# remover NAs
IDs_Fenotipos_Resistentes_2 <- gsub(
c(',NA|NA,'),'',IDs_Fenotipos_Resistentes_1$Genes) %>%
tibble()
# asignar nombre de columnas
colnames(IDs_Fenotipos_Resistentes_2) <- "ID_AST_Resistentes"
IDs_Fenotipos_Resistentes_3 <- cbind("Perfil" = Perfiles2$Perfil,IDs_Fenotipos_Resistentes_2)
# crear una fila mas
IDs_Fenotipos_Resistentes_3[nrow(IDs_Fenotipos_Resistentes_3)+1,] <- "Total"
# volver global
IDs_Fenotipos_Resistentes <<- IDs_Fenotipos_Resistentes_3
########### agregar AST_ID_Susceptibles ###############
if (sum(Completo$Fenotipo == "Resistente") == nrow(Completo)) {
# crear directamente IDs_Fenotipos_Resistentes_1
IDs_Fenotipos_Susceptibles_1 <<- c(
rep("NA", times = length(ID_Fenotipos_Susceptibles))) %>%
as_tibble()
names(IDs_Fenotipos_Susceptibles_1) <- "Genes"
} else {
# crear un solo df en base a df guardados en listas
IDs_Fenotipos_Susceptibles_0 <<- bind_rows(ID_Fenotipos_Susceptibles,) %>%
transpose
# unir IDs en una sola columna
IDs_Fenotipos_Susceptibles_1 <<- unite(IDs_Fenotipos_Susceptibles_0,
col = "Genes",
paste("V", 1:(ncol(IDs_Fenotipos_Susceptibles_0)), sep = ""),
sep = ",")
}
# remover NAs
IDs_Fenotipos_Susceptibles_2 <- gsub(
c(',NA|NA,'),'',IDs_Fenotipos_Susceptibles_1$Genes) %>%
tibble()
# asignar nombre de columnas
colnames(IDs_Fenotipos_Susceptibles_2) <- "ID_AST_Susceptibles"
IDs_Fenotipos_Susceptibles_3 <- cbind("Perfil" = Perfiles2$Perfil,
IDs_Fenotipos_Susceptibles_2)
# crear una fila mas
IDs_Fenotipos_Susceptibles_3[nrow(IDs_Fenotipos_Susceptibles_3)+1,] <- "Total"
# volver global
IDs_Fenotipos_Susceptibles <<- IDs_Fenotipos_Susceptibles_3
######## crear data frame final ##########
# df intermedio AST
final_ASTs <- merge(AST_R,
AST_S,
by = "Perfil")
# df final "ASTs con Genotipos Totales"
final_ASTs_GT <- merge(final_ASTs,
Perfiles[, c("Perfil", "Genotipo_Total")],
by = "Perfil")
# df final IDs
final_IDs <- merge(IDs_Fenotipos_Resistentes,
IDs_Fenotipos_Susceptibles,
by = "Perfil")
# df Final
Final <- merge(final_ASTs_GT, final_IDs, by = "Perfil")
# remover la palabra "Total"
Final[nrow(Final),c("ID_AST_Resistentes", "ID_AST_Susceptibles")] <- c(
especificidad,
sensibilidad)
# volver global
Final_df <<- Final
}
GenotipoCategorias(
"/home/senasica2/Documentos/2022/RES.POINT_FINDER/ResPointFinder_Salmonella_enterica_resultados_all.csv")
GuardarCategoriasRAM <- function(ruta, nombre) {
if (exists("Final_df") & exists("Perfiles") & exists("Patrones_Final")) {
# definir variables
directorio_final <- paste(ruta, Categoria, sep = "")
################################## Tabla Principal ####################
archivo_final_tabla <- paste(directorio_final, "/", nombre, "_",
str_to_title(Categoria), ".csv", sep = "")
################################ Perfiles #############################
archivo_final_perfiles <- paste(directorio_final, "/", "Perfiles_",
str_to_title(Categoria), ".csv", sep = "")
######################## Patrones Antimicrobianos #####################
archivo_final_patrones <- paste(ruta, "Patrones_Antimicrobianos",
".csv", sep = "")
########################### Multiresistencia ##########################
archivo_final_multiresistencia <- paste(ruta, "Tabla_Multiresistencia",
".csv", sep = "")
######################## Imagen Multiresistencia ######################
ggsave(filename = "Multiresistencia.jpg",
plot = Multiresistencia,
path = ruta,
width = 20,
height = 20,
units = "cm")
##########################################################################
# crear directorio
dir.create(directorio_final)
# crear archivo1
write.csv(Final_df, archivo_final_tabla, row.names = F)
# crear archivo2
write.csv(Perfiles, archivo_final_perfiles, row.names = F)
# crear archivos 3 y 4, una sola vez sobre "ruta", solo si no existe
if (!file.exists(archivo_final_patrones)) {
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
if (!file.exists(archivo_final_multiresistencia)) {
write.csv(TablaMR_Final, archivo_final_multiresistencia, row.names = F)
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
} else {
print("La categoria o los archivos 'Final' y/o 'Perfiles' no existen")
}
}
GuardarCategoriasRAM(
ruta = "/home/senasica2/Documentos/2023/",
nombre = "TablaRAM")
GuardarCategoriasRAM <- function(ruta, nombre) {
if (exists("Final_df") & exists("Perfiles") & exists("Patrones_Final")) {
# definir variables
directorio_final <- paste(ruta, Categoria, sep = "")
################################## Tabla Principal ####################
archivo_final_tabla <- paste(directorio_final, "/", nombre, "_",
str_to_title(Categoria), ".csv", sep = "")
################################ Perfiles #############################
archivo_final_perfiles <- paste(directorio_final, "/", "Perfiles_",
str_to_title(Categoria), ".csv", sep = "")
######################## Patrones Antimicrobianos #####################
archivo_final_patrones <- paste(ruta, "Patrones_Antimicrobianos",
".csv", sep = "")
########################### Multiresistencia ##########################
archivo_final_multiresistencia <- paste(ruta, "Tabla_Multiresistencia",
".csv", sep = "")
######################## Imagen Multiresistencia ######################
ggsave(filename = "Multiresistencia.jpg",
plot = Multiresistencia,
path = ruta,
width = 20,
height = 20,
units = "cm")
##########################################################################
# crear directorio
dir.create(directorio_final)
# crear archivo1
write.csv(Final_df, archivo_final_tabla, row.names = F)
# crear archivo2
write.csv(Perfiles, archivo_final_perfiles, row.names = F)
# crear archivos 3 y 4, una sola vez sobre "ruta", solo si no existe
if (!file.exists(archivo_final_patrones)) {
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
if (!file.exists(archivo_final_multiresistencia)) {
write.csv(TablaR_Final, archivo_final_multiresistencia, row.names = F)
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
} else {
print("La categoria o los archivos 'Final' y/o 'Perfiles' no existen")
}
}
GuardarCategoriasRAM <- function(ruta, nombre) {
if (exists("Final_df") & exists("Perfiles") & exists("Patrones_Final")) {
# definir variables
directorio_final <- paste(ruta, Categoria, sep = "")
################################## Tabla Principal ####################
archivo_final_tabla <- paste(directorio_final, "/", nombre, "_",
str_to_title(Categoria), ".csv", sep = "")
################################ Perfiles #############################
archivo_final_perfiles <- paste(directorio_final, "/", "Perfiles_",
str_to_title(Categoria), ".csv", sep = "")
######################## Patrones Antimicrobianos #####################
archivo_final_patrones <- paste(ruta, "Patrones_Antimicrobianos",
".csv", sep = "")
########################### Multiresistencia ##########################
archivo_final_multiresistencia <- paste(ruta, "Tabla_Multiresistencia",
".csv", sep = "")
######################## Imagen Multiresistencia ######################
ggsave(filename = "Multiresistencia.jpg",
plot = Multiresistencia,
path = ruta,
width = 20,
height = 20,
units = "cm")
##########################################################################
# crear directorio
dir.create(directorio_final)
# crear archivo1
write.csv(Final_df, archivo_final_tabla, row.names = F)
# crear archivo2
write.csv(Perfiles, archivo_final_perfiles, row.names = F)
# crear archivos 3 y 4, una sola vez sobre "ruta", solo si no existe
if (!file.exists(archivo_final_patrones)) {
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
if (!file.exists(archivo_final_multiresistencia)) {
write.csv(TablaR_Final, archivo_final_multiresistencia, row.names = F)
write.csv(Patrones_Final, archivo_final_patrones, row.names = F)
}
} else {
print("La categoria o los archivos 'Final' y/o 'Perfiles' no existen")
}
}
GuardarCategoriasRAM(
ruta = "/home/senasica2/Documentos/2023/",
nombre = "TablaRAM")
R.version
library("devtools")
library("roxygen2")
remove.packages("TablasRAM")
remove.packages("TablasRAM")
getwd()
setwd("Documentos/2023")
getwd()
devtools::create("TablasRAM")
setwd("TablasRAM/")
getwd()
getwd()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
getwd()
setwd("Documentos/2023")
getwd()
getwd()
setwd("Documentos/2023")
getwd()
getwd()
setwd("~/Documentos/2023")
getwd()
devtools::create("TablasRAM")
setwd("TablasRAM/")
getwd()
devtools::document()
devtools::install()
ls()
x<-c(1:2019)
comment(x)<-"números enteros del 1 al 2019"
comment()
x<-c(1:2019)
comment(x) <- "números enteros del 1 al 2019"
comment(x)
seq(by=0.5,to=20,from=1)
seq(by=0.2,to=20,from=1)
seq(3,8,by=0.3)
seq(3,8,length.out=10)
seq(3,8,length.out=20)
mode(1); class(1)
mode(1:3); class(1:3)
mode(1+2i); class(1+2i)
mode("hola"); class("hola")
u < -TRUE; mode(u); class(FALSE)
u < -TRUE; mode(u); class(FALSE)
u < -TRUE
u <- TRUE
mode(u)
class(FALSE)
x <- "Double quotes \" delimitate R’s strings."
x
cat(x)
print(x)
cat(x)
print(x)
cat(x)
x <- "Double quotes \t " delimitate R’s strings."
x
cat(x)
print(x)
x <- "Double quotes \t' delimitate R’s strings."
x
cat(x)
print(x)
x <- "Double quotes \n' delimitate R’s strings."
x
cat(x)
print(x)
q()
